@page "/payloads"
<!-- TODO: Add using and inject statements -->

<h3>Pending Transactions</h3>

@if (payloads == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <!-- TODO: Render a table with all of the pending transactions
               This table should include all of the fields for each pending transaction
      -->
}
<table background color = "black">
<thead>
    <tr>
        <th>Username</th>
        <th>Amount</th>
        <th>Item</th>
        <th>Transcation Type</th>
    </tr>
</thead>

<tbody>

    @foreach (var x in payloads)
    {
    <tr>
        <td>@x.User</td>
        <td>@x.Amount</td>
        <td>@x.TransactionType</td>
        <td>@x.Item</td>
    </tr>
    }
</tbody>

</table>
}


<p></p>

<p>@submitResponse</p>


<!-- TODO: Add EditForm to submit a new transaction to the server -->


@code {
    private IEnumerable<Payload> payloads;
    private Payload Payload = new Payload("", 0, 0, "");
    private string submitResponse = "";

    protected override async Task OnInitializedAsync()
    {
        // TODO: Fetch all the payloads from the service
    }

    private async Task HandleValidSubmit()
    {
        // TODO: submit the new payload to the web API using the PendingTransactionService
        //       - if succcessful, the payloads should be re-loaded
        //       - if there is an error, then the submitResponse variable should be updated with the error
    }
}
